# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/swift_utils.ipynb (unless otherwise specified).

__all__ = ['Datasets']

# Cell
import swiftclient
import json
import glob
import os
#from tqdm import tqdm_notebook as tqdm
from tqdm import tqdm

class Datasets:
    config = None # Dict configuration
    conn = None # swiftclient.Connection object
    container_name = 'oco2'
    def __init__(self, config_file):
        # Load config
        with open(config_file) as json_data_file:
            self.config = json.load(json_data_file)
        self.conn = self.swift_con()

#print(config['swift_storage']['user'])

    def swift_con(self, config=None):
        if config is None:
            config = self.config
        user=config['swift_storage']['user']
        key=config['swift_storage']['key']
        auth_url=config['swift_storage']['auth_url']
        tenant_name=config['swift_storage']['tenant_name']
        auth_version=config['swift_storage']['auth_version']
        options = config['swift_storage']['options']
        self.conn = swiftclient.Connection(user=user,
                                      key=key,
                                      authurl=auth_url,
                                      os_options=options,
                                      tenant_name=tenant_name,
                                      auth_version=auth_version)
        return self.conn



    def upload(self, mask='c:\datasets\*.csv', prefix="/Trash/",content_type='text/csv', recursive=False):
        for file in tqdm(glob.glob(mask, recursive=recursive)):
            with open(file, 'rb') as one_file:
                    upload_to = prefix+ os.path.basename(file)
                    #print('Copy from',file,'to',upload_to)
                    self.conn.put_object(self.container_name, upload_to,
                                                    contents= one_file.read(),
                                                    content_type=content_type) # 'text/csv'
    def get_files_urls(self, pattern=""):
        result=[]
        objects = self.conn.get_container(self.container_name)[1]
        for data in objects:
            if pattern in data['name']:
                url = self.config['swift_storage']['base_url']+data['name']
                result.append(url)
        return result

    def delete_files(self, pattern="pattern_to_delete", dry_run=True):
        for data in tqdm(self.conn.get_container(self.container_name)[1]):
            file = data['name']
            if 'peaks-detected' in file:
                #print('delete', file)
                if not dry_run:
                    self.conn.delete_object(self.container_name, file)